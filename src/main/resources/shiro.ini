#*******************************************************************************
# Security settings with Apache Shiro
#
# @author Leo Liao, 2012/06/22, created
#*******************************************************************************

#===============================================================================
# MAIN
# Objects and their properties are defined here,
# Such as the securityManager, Realms and anything
# else needed to build the SecurityManager
#===============================================================================
[main]
#-------------------------------------------------------------------------------
# Realm Definition
#-------------------------------------------------------------------------------
myRealm = hpps.qad.core.appsec.auth.HybridRealm
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager
hosts = hpps.qad.core.appsec.filter.ClientHostAuthzFilter
permcode = hpps.qad.core.appsec.filter.PermCodeAuthzFilter
authcSig = hpps.qad.core.appsec.filter.SignatureAuthcFilter
authcSig.applicationName = Kanban
authcSig.authzScheme = HMAC

#-------------------------------------------------------------------------------
# Active Directory Settings
# CMB Production  ldap://10.1.30.68:389
# CMB Testing     ldap://99.6.137.1:389
#-------------------------------------------------------------------------------
myRealm.systemUsername = cn=sauser,dc=itc,dc=cmbchina,dc=cn
myRealm.systemPassword = opsware@2012
myRealm.searchBase = DC=itc,DC=cmbchina,DC=cn
myRealm.principalSuffix = @itc
myRealm.url = ldap://10.1.30.68:389
#myRealm.url = ldap://127.0.0.1:389

#-------------------------------------------------------------------------------
# Realm's Credentials Matcher
# Use hash matcher for local db, simple matcher for AD
#-------------------------------------------------------------------------------
myRealm.localCredentialsMatcher = $hashMatcher
myRealm.adCredentialsMatcher = $simpleMatcher
myRealm.signatureCredentialsMatcher = $simpleMatcher

#-------------------------------------------------------------------------------
# Credential Matchers
#-------------------------------------------------------------------------------
simpleMatcher = org.apache.shiro.authc.credential.SimpleCredentialsMatcher
hashMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
hashMatcher.hashAlgorithmName = SHA-512
hashMatcher.hashIterations = 1024
hashMatcher.storedCredentialsHexEncoded = false

#-------------------------------------------------------------------------------
# Authentication Page
#-------------------------------------------------------------------------------
#authc.loginUrl = /login!input.action
authc.loginUrl = /login
permcode.loginUrl = /login

# redirect to an error page if user does not have access rights
roles.unauthorizedUrl = /util/access-denied.jsp

#===============================================================================
# USERS
# The 'users' section is for simple deployments
# when you only need a small number of statically-defined set of User accounts.
# We store users in db. This section is not used.
#===============================================================================
[users]


#===============================================================================
# ROLES
# The 'roles' section is for simple deployments
# when you only need a small number of statically-defined roles.
# We store roles in db. This section is not used.
#===============================================================================
[roles]

#===============================================================================
# URL RESTRICTIONS
# Always remember to define your filter chains based on a FIRST MATCH WINS policy!
# http://shiro.apache.org/web.html#Web-%257B%257B%255Curls%255C%257D%257D
#===============================================================================

[urls]
#-------------------------------------------------------------------------------
# RESTful API
#-------------------------------------------------------------------------------
/api/rest/**/*.json=authcSig
/api/rest/**/*.xml=authcSig

#-------------------------------------------------------------------------------
# Provision
#-------------------------------------------------------------------------------

/provision/save*=authc, perms["provision:mgmt"]
/provision/edit*=authc, perms["provision:mgmt"]
/provision/delete*=authc, perms["provision:mgmt"]
/provision/update*=authc, perms["provision:mgmt"]
/provision/deploy*=authc, perms["provision:mgmt"]
/provisiontask/save*=authc, perms["provision:mgmt"]
/provisiontask/edit*=authc, perms["provision:mgmt"]
/provisiontask/delete*=authc, perms["provision:mgmt"]
/provisiontask/update*=authc, perms["provision:mgmt"]
/provisionmodel/save*=authc, perms["provision:mgmt"]
/provisionmodel/edit*=authc, perms["provision:mgmt"]
/provisionmodel/delete*=authc, perms["provision:mgmt"]
/provisionmodel/update*=authc, perms["provision:mgmt"]
/provisioncheck/save*=authc, perms["provision:mgmt"]
/provisioncheck/edit*=authc, perms["provision:mgmt"]
/provisioncheck/delete*=authc, perms["provision:mgmt"]
/provisioncheck/update*=authc, perms["provision:mgmt"]
#-------------------------------------------------------------------------------
# Patch
#-------------------------------------------------------------------------------
/patch/save*=authc, perms["patch:mgmt"]
/patch/edit*=authc, perms["patch:mgmt"]
/patch/delete*=authc, perms["patch:mgmt"]
/patch/update*=authc, perms["patch:mgmt"]
/patch/deploy*=authc, perms["patch:mgmt"]
/patchmatrix/save*=authc, perms["patch:mgmt"]
/patchmatrix/edit*=authc, perms["patch:mgmt"]
/patchmatrix/delete*=authc, perms["patch:mgmt"]
/patchmatrix/update*=authc, perms["patch:mgmt"]
/patchmatrix/deploy*=authc, perms["patch:mgmt"]
/patchfirmware/save*=authc, perms["patch:mgmt"]
/patchfirmware/edit*=authc, perms["patch:mgmt"]
/patchfirmware/delete*=authc, perms["patch:mgmt"]
/patchfirmware/update*=authc, perms["patch:mgmt"]
/patchfirmware/deploy*=authc, perms["patch:mgmt"]

#-------------------------------------------------------------------------------
# Demo code
#-------------------------------------------------------------------------------
/democode/update*=authc, permcode["perm_democode_update"]

#-------------------------------------------------------------------------------
# Generated from Excel design
#-------------------------------------------------------------------------------
# 系统管理：用户
/user/create*=authc, permcode["perm_sysadm_user"]
/user/view=authc
/user/update*=authc, permcode["perm_sysadm_user"]
/user/delete*=authc, permcode["perm_sysadm_user"]
# 系统管理：角色
/role/create*=authc, permcode["perm_sysadm_role"]
/role/view=authc
/role/update*=authc, permcode["perm_sysadm_role"]
/role/delete*=authc, permcode["perm_sysadm_role"]
# 系统管理：权限定义
/permission/create*=authc, permcode["perm_sysadm_permission"]
/permission/view=authc, permcode["perm_sysadm_permission"]
/permission/update*=authc, permcode["perm_sysadm_permission"]
/permission/delete*=authc, permcode["perm_sysadm_permission"]
/user/matrix=authc, permcode["perm_sysadm_permission"]
# 系统管理：域对象
/citype/create*=authc, permcode["perm_sysadm_domain"]
/citype/view=authc, permcode["perm_sysadm_domain"]
/citype/update*=authc, permcode["perm_sysadm_domain"]
/citype/delete*=authc, permcode["perm_sysadm_domain"]
# 系统管理：室组
/customer/create*=authc, permcode["perm_sysadm_customer"]

/customer/update*=authc, permcode["perm_sysadm_customer"]
/customer/delete*=authc, permcode["perm_sysadm_customer"]
# 系统管理：其它
/sysadm/bsh=authc, permcode["perm_sysadm_bsh"]
/sysadm/sql-console*=authc, permcode["perm_sysadm_sql"]
/admin/config/search*=authc, permcode["perm_sysadm_search"]
/static/es_head*=authc, permcode["perm_sysadm_search"]
/_elasticsearch/*=authc, permcode["perm_sysadm_search"]
/sysadm/sysparam*=authc, permcode["perm_sysadm_param"]
/sysadm/webfm=authc, permcode["perm_sysadm_all"]
/sysadm/**=authc, perms["sysadm"]

# 演练管理
/rs6000/drill/create*=authc
/rs6000/drill/copy*=authc

/rs6000/drill/update*=authc, permcode["perm_drill_update"]
/rs6000/drill/delete*=authc, permcode["perm_drill_delete"]
/rs6000/drill/run*=authc, permcode["perm_drill_execute"]
# 系统功能：公告
/jpost/bulletin/create*=authc, permcode["perm_bulletin_create"]

/jpost/bulletin/update*=authc, permcode["perm_bulletin_update"]
/jpost/bulletin/delete*=authc, permcode["perm_bulletin_delete"]
# 系统功能：反馈
/jpost/feedback/create*=authc
/jpost/feedback/reply*=authc

/jpost/feedback/update*=authc, permcode["perm_feedback_update"]
/jpost/feedback/execute*=authc, permcode["perm_feedback_update_status"]
/jpost/feedback/delete*=authc, permcode["perm_feedback_delete"]
# 用户功能：个人资料
/profile=authc
/profile/update*=authc

# 投产管理




# 一键任务
/ootask/create*=authc, permcode["perm_ootask_create"]

/ootask/update*=authc, permcode["perm_ootask_update"]
/ootask/delete*=authc, permcode["perm_ootask_delete"]
/ootask/run*=authc, permcode["perm_ootask_execute"]
# 资产信息
#/update*=authc, permcode["perm_update"]
# 日常值班
#/update*=authc, permcode["perm_update"]
#/dutyrecord/create*=authc, permcode["perm_dutyrecord_create"]
# 容量管理: 容量管理
/capacity/create*=authc, permcode["perm_capacity_create"]
/capacity/update*=authc, permcode["perm_capacity_update"]
/capacity/delete*=authc, permcode["perm_capacity_delete"]
# 容量管理: 服务器配对
/pair/create*=authc, permcode["perm_pair_create"]

/pair/update*=authc, permcode["perm_pair_update"]
/pair/delete*=authc, permcode["perm_pair_delete"]
# 容量管理: 位置管理
/position/create*=authc, permcode["perm_position_create"]

/position/update*=authc, permcode["perm_position_update"]
/position/delete*=authc, permcode["perm_position_delete"]
# 投产管理: 投产记录
/rs6000/provision/create*=authc, permcode["perm_provision_create"]

/rs6000/provision/update*=authc, permcode["perm_provision_update"]
/rs6000/provision/delete*=authc, permcode["perm_provision_delete"]
/rs6000/provision/execute*=authc, permcode["perm_provision_execute"]
# 投产管理: 投产任务
/rs6000/provisiontask/create*=authc, permcode["perm_provisiontask_create"]

/rs6000/provisiontask/update*=authc, permcode["perm_provisiontask_update"]
/rs6000/provisiontask/delete*=authc, permcode["perm_provisiontask_delete"]
/rs6000/provisiontask/execute*=authc, permcode["perm_provisiontask_execute"]
# 投产管理: 投产模板
/rs6000/provisionmodel/create*=authc, permcode["perm_provisionmodel_create"]

/rs6000/provisionmodel/update*=authc, permcode["perm_provisionmodel_update"]
/rs6000/provisionmodel/delete*=authc, permcode["perm_provisionmodel_delete"]
# 补丁管理: 补丁信息
/rs6000/patch/create*=authc, permcode["perm_patch_create"]

/rs6000/patch/update*=authc, permcode["perm_patch_update"]
/rs6000/patch/delete*=authc, permcode["perm_patch_delete"]
# 补丁管理: 软件矩阵
/rs6000/patchmatrix/create*=authc, permcode["perm_patchmatrix_create"]

/rs6000/patchmatrix/update*=authc, permcode["perm_patchmatrix_update"]
/rs6000/patchmatrix/delete*=authc, permcode["perm_patchmatrix_delete"]
# 补丁管理: 硬件微码
/rs6000/patchfirmware/create*=authc, permcode["perm_patchfirmware_create"]

/rs6000/patchfirmware/update*=authc, permcode["perm_patchfirmware_update"]
/rs6000/patchfirmware/delete*=authc, permcode["perm_patchfirmware_delete"]
# ITIL管理
itil/request/*=authc, permcode["perm_request_create"]

# 网络室 :IP申请
network/register/edit*=authc, permcode["perm_register_edit"]
network/register/apply*=authc, permcode["perm_register_apply"]
network/register/delete*=authc, permcode["perm_register_delete"]
# 网络室 :IP地址
network/ipaddress/edit*=authc, permcode["perm_ipaddress_edit"]
network/ipaddress/delete*=authc, permcode["perm_ipaddress_delete"]
# 网络室 :IP网段
network/ipsubnet/edit*=authc, permcode["perm_ipsubnet_edit"]
network/ipsubnet/delete*=authc, permcode["perm_ipsubnet_delete"]
network/ipsubnet/upload*=authc, permcode["perm_ipsubnet_upload"]
network/ipsubnet/ping*=authc, permcode["perm_ipsubnet_ping"]
network/ipsubnet/create*=authc, permcode["perm_ipsubnet_create"]
# 网络室 :网络设备
network/device/edit*=authc, permcode["perm_device_edit"]
network/device/delete*=authc, permcode["perm_device_delete"]
#数据库 :SOM权限控制
operation/audit/edit*=authc, permcode["perm_audit_edit"]
operation/adminaudit/edit*=authc, permcode["perm_adminaudit_edit"]
#数据库 :DB一键巡检--EVENT
database/event/edit*=authc, permcode["perm_event_edit"]
#数据库 :值班报告
database/dutyhandle/edit*=authc, permcode["perm_dutyhandle_edit"]
#网络室 :网络设备配置变更审计记录
network/auditrecord/edit*=authc, permcode["perm_auditrecord_edit"]
network/interface/edit*=authc, permcode["perm_interface_edit"]
network/firewall/edit*=authc, permcode["perm_firewall_edit"]
#数据库 无配置项
database/pdbinfo/edit*=authc, permcode["perm_pdbinfo_edit"]
database/ldbinfo/edit*=authc, permcode["perm_ldbinfo_edit"]
database/bizinfo/edit*=authc, permcode["perm_bizinfo_edit"]
#数据库 未配置项 物理数据库 编辑维护难度系数权限
database/pdbinfotemp/create*=authc, permcode["perm_pdbinfotemp_create"]



# SA-ROOT权限控制
/sa/saroot-grant*=authc
/sa/saroot/revoke*=authc
/sa/sa-root-sort*=authc



# 厂商巡检权限控制
/rs6000/vendor-check*=authc
/rs6000/vendor-check-list*=authc
/rs6000/report-check-list*=authc
/rs6000/vendorcheckreport/edit*=authc



# ITIL管理权限控制
/itil/itil-index*=authc
/itil/itil-todo-list*=authc


# WINDOWS模块权限控制
prm/question*=authc, permcode["perm_prmtask_question"]

# AS400执行巡检权限控制
/ootask/runforAsAll*=authc, permcode["perm_as400_runforAsAll"]

#DB2例外参数模块权限控制
database/param/edit*=authc, permcode["perm_paramexception_edit"]